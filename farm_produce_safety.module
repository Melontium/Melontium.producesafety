<?php
/**
 * @file
 * Code for the Farm Produce Safety feature.
 */

include_once 'farm_produce_safety.features.inc';

include_once 'farm_produce_safety.file.inc';

/**
 * Implements hook_menu().
 */
function farm_produce_safety_menu() {

  // Produce safety dashboard.
  $items['farm/produce-safety'] = array(
    'title' => 'Produce Safety',
    'page callback' => 'farm_produce_safety_dashboard',
    'access arguments' => array('access farm dashboard'),
    'file' => 'farm_produce_safety.pages.inc',
    'type' => MENU_LOCAL_TASK,
  );
  return $items;
}

/**
 * Implements hook_farm_record_types().
 */
function farm_produce_safety_farm_record_types() {
  return array(
    'log' => array(
      'farm_training' => array(
        'label' => t('Training'),
        'label_plural' => t('Trainings'),
        'log_settings' => array(
          'name_pattern' => 'Training: [log:field-farm-training-topics]',
          'name_edit' => FALSE,
          'done' => TRUE,
        ),
        'view' => 'farm_produce_safety_training',
        'farm_asset' => 'none',
      ),
      'farm_worker_health' => array(
        'label' => t('Worker health log'),
        'label_plural' => t('Worker health logs'),
        'log_settings' => array(
          'name_pattern' => 'Worker health: [log:field-farm-people] [log:field-farm-health-summary]',
          'name_edit' => FALSE,
          'done' => TRUE,
        ),
        'view' => 'farm_produce_safety_worker_health',
        'farm_asset' => 'none',
        'areas' => TRUE,
      ),
    ),
  );
}

/**
 * Implements hook_farm_log_categories().
 */
function farm_produce_safety_farm_log_categories() {

  // Provide an "Produce Safety" log category.
  return array('Produce Safety');
}

/**
 * Implements hook_farm_log_categories_populate().
 */
function farm_produce_safety_farm_log_categories_populate($log) {
  $categories = array();
  if (in_array($log->type, array('farm_training', 'farm_worker_health'))) {
    $categories[] = 'Produce Safety';
  }
  return $categories;
}

/**
 * Implements hook_form_log_form_alter().
 */
function farm_produce_safety_form_log_form_alter(&$form, &$form_state) {

  // Only act on new logs.
  if (empty($form['#entity']) || !empty($form['#entity']->id)) {
    return;
  }

  // Create a link to the produce safety dashboard.
  $link = l(t('Go to the Produce Safety Dashboard'), 'farm/produce-safety');

  // If the log is a seeding/transplanting, display a pre-planting assessment
  // reminder.
  if (in_array($form['#entity']->type, array('farm_seeding', 'farm_transplanting'))) {
    drupal_set_message(t('Reminder: did you perform a pre-planting risk assessment?') . ' ' . $link, 'warning');
  }

  // Or, if the log is a harvest, display a pre-harvest assessment reminder.
  elseif ($form['#entity']->type == 'farm_harvest') {
    drupal_set_message(t('Reminder: did you perform a pre-harvest risk assessment?') . ' ' . $link, 'warning');
  }
}

/**
 * Implements hook_feeds_importer_default_alter().
 */
function farm_produce_safety_feeds_importer_default_alter(&$importers) {

  // Add extra field mappings to trainings.
  $name = 'log_farm_training';
  if (!empty($importers[$name])) {
    $mappings = array(
      array(
        'source' => 'Topics',
        'target' => 'field_farm_training_topics',
        'unique' => FALSE,
        'language' => 'und',
      ),
      array(
        'source' => 'Materials',
        'target' => 'field_farm_training_materials',
        'unique' => FALSE,
        'language' => 'und',
      ),
      array(
        'source' => 'Trainer',
        'target' => 'field_farm_log_owner:label',
        'unique' => FALSE,
        'language' => 'und',
      ),
      array(
        'source' => 'Attendees',
        'target' => 'field_farm_people:label',
        'unique' => FALSE,
        'language' => 'und',
      ),
    );
    $importer_mappings =& $importers[$name]->config['processor']['config']['mappings'];
    $importer_mappings = array_merge($importer_mappings, $mappings);
  }

  // Add extra field mappings to worker health logs.
  $name = 'log_farm_worker_health';
  if (!empty($importers[$name])) {
    $mappings = array(
      array(
        'source' => 'Worker',
        'target' => 'field_farm_people:label',
        'unique' => FALSE,
        'language' => 'und',
      ),
      array(
        'source' => 'Injury/illness',
        'target' => 'field_farm_health_summary',
        'unique' => FALSE,
        'language' => 'und',
      ),
      array(
        'source' => 'Action taken',
        'target' => 'field_farm_action',
        'unique' => FALSE,
        'language' => 'und',
      ),
      array(
        'source' => 'Returned to work',
        'target' => 'field_farm_worker_returned',
        'unique' => FALSE,
        'language' => 'und',
      ),
      array(
        'source' => 'Reporter',
        'target' => 'field_farm_log_owner:label',
        'unique' => FALSE,
        'language' => 'und',
      ),
    );
    $importer_mappings =& $importers[$name]->config['processor']['config']['mappings'];
    $importer_mappings = array_merge($importer_mappings, $mappings);
  }
}

/**
 * Implements hook_feeds_tamper_default_alter().
 */
function farm_produce_safety_feeds_tamper_default_alter(&$feeds_tampers) {

  // If farm_import is not installed, bail.
  if (!module_exists('farm_import')) {
    return;
  }

  // Explode trainer in training logs.
  $feeds_tamper = farm_import_feeds_tamper_plugin('log', 'farm_training', 'Trainer', 'explode');
  $feeds_tampers[$feeds_tamper->id] = $feeds_tamper;

  // Explode attendees in training logs.
  $feeds_tamper = farm_import_feeds_tamper_plugin('log', 'farm_training', 'Attendees', 'explode');
  $feeds_tampers[$feeds_tamper->id] = $feeds_tamper;

  // Convert "Returned to work?" to boolean in worker health logs.
  $feeds_tamper = farm_import_feeds_tamper_plugin('log', 'farm_worker_health', 'Returned to work', 'boolean_default_false');
  $feeds_tampers[$feeds_tamper->id] = $feeds_tamper;
}
